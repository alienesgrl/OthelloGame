/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.fsm.bp2project1;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.security.auth.callback.ConfirmationCallback;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alien
 */
public class AliEnesGurelFrm_GameScene extends javax.swing.JFrame {

    private JButton[][] btnArray;
    private JPanel[][] pnl_grid;
    private int[][] grid_num;
    private boolean oyuncuSiyahMi;
    private int size;
    private int oyuncu;
    int hamle = 0;
    public int birinciSkor;
    public int ikinciSkor;
    AliEnesGurelLogin login = new AliEnesGurelLogin();
    DefaultTableModel table = new DefaultTableModel();
    DefaultTableModel scoreTable = new DefaultTableModel();
    private static Border redLine;
    //iconlar
    ImageIcon iconBeyaz = new ImageIcon("C:\\Users\\alien\\OneDrive\\Belgeler\\NetBeansProjects\\alienes_gurel_2121221032_bp2_project\\src\\main\\java\\icons\\beyazbutton.png");
    ImageIcon iconSiyah = new ImageIcon("C:\\Users\\alien\\OneDrive\\Belgeler\\NetBeansProjects\\alienes_gurel_2121221032_bp2_project\\src\\main\\java\\icons\\siyahbutton.png");
    ImageIcon iconBerabere = new ImageIcon("C:\\Users\\alien\\OneDrive\\Belgeler\\NetBeansProjects\\lienes_alienes_gurel_2121221032_bp2_project\\src\\main\\java\\icons\\berabere.png");
    ImageIcon cikis = new ImageIcon("C:\\Users\\alien\\OneDrive\\Belgeler\\NetBeansProjects\\alienes_gurel_2121221032_bp2_project\\src\\main\\java\\icons\\cikis.png");

    Image newImg1 = iconSiyah.getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH);
    ImageIcon newSiyahBtn = new ImageIcon(newImg1);
    Image newImg2 = iconBeyaz.getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH);
    ImageIcon newBeyazBtn = new ImageIcon(newImg2);
    Image newImg3 = cikis.getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH);
    ImageIcon newCikis = new ImageIcon(newImg3);
    AliEnesGurelSkorTablosu skorTablosu = new AliEnesGurelSkorTablosu();

    /**
     * Creates new form OyunEkrani
     */
    public AliEnesGurelFrm_GameScene() {
        setTitle("OTHELLO (REVERSI OYUNU)");
        initComponents();
        table = (DefaultTableModel) tbl_tablo.getModel();
        scoreTable = (DefaultTableModel) skorTablosu.getTbl_skorTablosu().getModel();
        lbl_oyuncu1.setText(login.getKullanici1().kullanici_Adi + "Skoru: ");
        lbl_oyuncu2.setText(login.getKullanici2().kullanici_Adi + "Skoru: ");
        pnl_sira.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        pnl_gameScene = new javax.swing.JPanel();
        pbl_sagBilgi = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lbl_spnr = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        spnr = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_tablo = new javax.swing.JTable();
        pnl_altBilgi = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbl_oyuncu2 = new javax.swing.JLabel();
        lbl_oyuncu1 = new javax.swing.JLabel();
        lbl_black_score = new javax.swing.JLabel();
        lbl_white_score = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pnl_sira = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btn_cikis = new javax.swing.JButton();
        btn_yeniOyun = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_oyun = new javax.swing.JMenu();
        menuItem_YeniOyun = new javax.swing.JMenuItem();
        menuItem_Cikis = new javax.swing.JMenuItem();
        menu_skorlar = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 700));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanel3.setBackground(new java.awt.Color(0, 51, 51));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        pnl_gameScene.setBackground(new java.awt.Color(0, 153, 102));
        pnl_gameScene.setMaximumSize(new java.awt.Dimension(1500, 1500));
        pnl_gameScene.setMinimumSize(new java.awt.Dimension(500, 500));
        pnl_gameScene.setPreferredSize(new java.awt.Dimension(500, 500));
        pnl_gameScene.setLayout(new java.awt.GridLayout(1, 0));
        jPanel3.add(pnl_gameScene);

        pbl_sagBilgi.setBackground(new java.awt.Color(0, 51, 51));
        pbl_sagBilgi.setMaximumSize(new java.awt.Dimension(3000, 32767));
        pbl_sagBilgi.setMinimumSize(new java.awt.Dimension(220, 60));
        pbl_sagBilgi.setPreferredSize(new java.awt.Dimension(220, 60));
        pbl_sagBilgi.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("OYUN BOYUTUNU SECÄ°N");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 70, 0, 0);
        pbl_sagBilgi.add(jLabel1, gridBagConstraints);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        lbl_spnr.setBackground(new java.awt.Color(0, 0, 0));
        lbl_spnr.setForeground(new java.awt.Color(0, 0, 0));
        lbl_spnr.setText("5");

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("X");

        spnr.setModel(new javax.swing.SpinnerNumberModel(5, 5, 10, 1));
        spnr.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        spnr.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        spnr.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                spnrAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        spnr.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnrStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lbl_spnr, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(spnr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_spnr)
                    .addComponent(jLabel2)
                    .addComponent(spnr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 42, 0, 0);
        pbl_sagBilgi.add(jPanel1, gridBagConstraints);

        tbl_tablo.setBackground(new java.awt.Color(255, 255, 255));
        tbl_tablo.setForeground(new java.awt.Color(0, 51, 51));
        tbl_tablo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "HAMLE", "OYUNCU", "POZISYON"
            }
        ));
        tbl_tablo.setMinimumSize(new java.awt.Dimension(225, 0));
        tbl_tablo.setSelectionBackground(new java.awt.Color(0, 51, 51));
        tbl_tablo.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(tbl_tablo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 244;
        gridBagConstraints.ipady = 422;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 6, 0, 12);
        pbl_sagBilgi.add(jScrollPane2, gridBagConstraints);

        jPanel3.add(pbl_sagBilgi);

        getContentPane().add(jPanel3);

        pnl_altBilgi.setBackground(new java.awt.Color(0, 51, 51));
        pnl_altBilgi.setMaximumSize(new java.awt.Dimension(32767, 500));
        pnl_altBilgi.setMinimumSize(new java.awt.Dimension(500, 100));
        pnl_altBilgi.setPreferredSize(new java.awt.Dimension(500, 100));
        pnl_altBilgi.setLayout(new javax.swing.BoxLayout(pnl_altBilgi, javax.swing.BoxLayout.LINE_AXIS));

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));
        jPanel2.setMaximumSize(new java.awt.Dimension(1500, 100));
        jPanel2.setMinimumSize(new java.awt.Dimension(500, 100));
        jPanel2.setPreferredSize(new java.awt.Dimension(500, 100));
        jPanel2.setLayout(null);

        lbl_oyuncu2.setForeground(new java.awt.Color(255, 255, 255));
        lbl_oyuncu2.setText("BEYAZ OYUNCU SKORU :");
        jPanel2.add(lbl_oyuncu2);
        lbl_oyuncu2.setBounds(9, 18, 170, 16);

        lbl_oyuncu1.setForeground(new java.awt.Color(255, 255, 255));
        lbl_oyuncu1.setText("SÄ°YAH OYUNCU SKORU :");
        jPanel2.add(lbl_oyuncu1);
        lbl_oyuncu1.setBounds(9, 52, 170, 16);

        lbl_black_score.setForeground(new java.awt.Color(255, 255, 255));
        lbl_black_score.setText("0");
        jPanel2.add(lbl_black_score);
        lbl_black_score.setBounds(185, 58, 60, 16);

        lbl_white_score.setForeground(new java.awt.Color(255, 255, 255));
        lbl_white_score.setText("0");
        jPanel2.add(lbl_white_score);
        lbl_white_score.setBounds(185, 18, 60, 16);

        jLabel5.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Oyun SÄ±rasÄ± :");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(330, 40, 73, 14);

        pnl_sira.setMinimumSize(new java.awt.Dimension(50, 50));
        pnl_sira.setPreferredSize(new java.awt.Dimension(50, 50));

        javax.swing.GroupLayout pnl_siraLayout = new javax.swing.GroupLayout(pnl_sira);
        pnl_sira.setLayout(pnl_siraLayout);
        pnl_siraLayout.setHorizontalGroup(
            pnl_siraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        pnl_siraLayout.setVerticalGroup(
            pnl_siraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel2.add(pnl_sira);
        pnl_sira.setBounds(430, 20, 50, 50);

        pnl_altBilgi.add(jPanel2);

        jPanel4.setBackground(new java.awt.Color(0, 51, 51));
        jPanel4.setMaximumSize(new java.awt.Dimension(620, 2147483647));
        jPanel4.setMinimumSize(new java.awt.Dimension(320, 100));
        jPanel4.setPreferredSize(new java.awt.Dimension(300, 100));
        jPanel4.setLayout(null);

        btn_cikis.setBackground(new java.awt.Color(0, 51, 51));
        btn_cikis.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btn_cikis.setForeground(new java.awt.Color(255, 255, 255));
        btn_cikis.setText("CIKIS");
        btn_cikis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cikisActionPerformed(evt);
            }
        });
        jPanel4.add(btn_cikis);
        btn_cikis.setBounds(200, 20, 70, 60);

        btn_yeniOyun.setBackground(new java.awt.Color(0, 51, 51));
        btn_yeniOyun.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btn_yeniOyun.setForeground(new java.awt.Color(255, 255, 255));
        btn_yeniOyun.setText("Yeni Oyun");
        btn_yeniOyun.setPreferredSize(new java.awt.Dimension(120, 20));
        btn_yeniOyun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_yeniOyunActionPerformed(evt);
            }
        });
        jPanel4.add(btn_yeniOyun);
        btn_yeniOyun.setBounds(3, 22, 170, 60);

        pnl_altBilgi.add(jPanel4);

        getContentPane().add(pnl_altBilgi);

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setForeground(new java.awt.Color(0, 0, 0));

        menu_oyun.setText("Oyun");

        menuItem_YeniOyun.setText("Yeni Oyun BaÅlat");
        menuItem_YeniOyun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_YeniOyunActionPerformed(evt);
            }
        });
        menu_oyun.add(menuItem_YeniOyun);

        menuItem_Cikis.setText("ÃÄ±kÄ±Å");
        menuItem_Cikis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_CikisActionPerformed(evt);
            }
        });
        menu_oyun.add(menuItem_Cikis);

        jMenuBar1.add(menu_oyun);

        menu_skorlar.setText("Skorlar");

        jMenuItem3.setText("Skor Tablosunu GÃ¶ster");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        menu_skorlar.add(jMenuItem3);

        jMenuBar1.add(menu_skorlar);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItem_YeniOyunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_YeniOyunActionPerformed
        oyunuBaslat();//menuden oyunu baslatir
    }//GEN-LAST:event_menuItem_YeniOyunActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        skorTablosu.setVisible(true);//menuden skor tablosunu gorunur yapar
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void btn_yeniOyunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_yeniOyunActionPerformed
        oyunuBaslat();// yeni oyun baslat butonu ile oyunu baslatir
    }//GEN-LAST:event_btn_yeniOyunActionPerformed
    public void oyunuBaslat() {
        //her oyunu baslat butonuna basiliginda bu metodu cagirir.
        pnl_sira.setVisible(true);
        table.setRowCount(0);
        hamle = 0;
        pnl_gameScene.removeAll();
        lbl_black_score.setText("0");
        lbl_white_score.setText("0");
        pnl_sira.setBackground(Color.BLACK);
        size = (int) (spnr.getValue());
        int ort = (size / 2) - 1;
        int ort_bir_ustu = size / 2;
        btnArray = new JButton[size][size];
        pnl_grid = new JPanel[size][size];
        pnl_gameScene.setLayout(new GridLayout(size, size));
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                btnArray[i][j] = new JButton();
                pnl_grid[i][j] = new JPanel();
                pnl_grid[i][j].setLayout(new BorderLayout());
                pnl_grid[i][j].setBorder(LineBorder.createBlackLineBorder());
                pnl_grid[i][j].setBackground(Color.GREEN);
                pnl_gameScene.add(pnl_grid[i][j]);
                pnl_grid[i][j].add(btnArray[i][j]);
                btnArray[i][j].setBackground(Color.GREEN);
                btnArray[i][j].setVisible(false);
                btnArray[i][j].addActionListener(new AliEnesGurelFrm_GameScene.ButtonClickListener(i, j));
            }
            validate();
        }
        grid_num = new int[size][size];
        oyuncu = 1;
        grid_num[ort][ort_bir_ustu] = 1;
        grid_num[ort_bir_ustu][ort] = 1;
        grid_num[ort_bir_ustu][ort_bir_ustu] = 2;
        grid_num[ort][ort] = 2;
        ilkEkran();
        Kontrol();
    }

    private void ilkEkran() {
        //frame acilinca ilk ekrani olusturur.
        for (int i = 0; i < (int) (spnr.getValue()); i++) {
            for (int j = 0; j < (int) (spnr.getValue()); j++) {
                if (grid_num[i][j] == 1) {
                    btnArray[i][j].setVisible(true);
                    //  btnArray[i][j].setBackground(Color.BLACK);
                    btnArray[i][j].setIcon(newSiyahBtn);
                } else if (grid_num[i][j] == 2) {
                    btnArray[i][j].setVisible(true);
                    // btnArray[i][j].setBackground(Color.WHITE);
                    btnArray[i][j].setIcon(newBeyazBtn);

                }
            }
        }
    }

    public class ButtonClickListener implements ActionListener {//bu class grid paneldeki butonlara tiklanilmasini dinlemek icin olusturuldu

        private int row;
        private int col;

        public ButtonClickListener(int row, int col) {
            this.row = row;
            this.col = col;
        }

        @Override
        public void actionPerformed(ActionEvent e) {//butonlara tiklanildiginda olusacak
            guncelle();
            if (btnArray[row][col].getBackground() == Color.GREEN) {
                hamle++;
                siradakiOyuncu();
                System.out.println("row" + row + "column" + col);

                if (oyuncu == 1) {
                    Object[] tabloyaEkle = {hamle, login.getKullanici1().kullanici_Adi, "r:" + row + " - " + "c:" + col};
                    pnl_sira.setBackground(Color.WHITE);
                    table.addRow(tabloyaEkle);
                } else if (oyuncu == 2) {
                    Object[] tabloyaEkle = {hamle, login.getKullanici2().kullanici_Adi, "r:" + row + " - " + "c:" + +col};
                    pnl_sira.setBackground(Color.BLACK);
                    table.addRow(tabloyaEkle);
                }
            }
            if (hamleVarMi(row, col)) {//algoritmanin asil calistigi yer
                hareketEt(row, col);
                Kontrol();
            }
            scoreSay();
            kimKazandi();
        }
    }

    private void siradakiOyuncu() {//oyuncu sirasi degistirir.
        oyuncuSiyahMi = !oyuncuSiyahMi;
    }

    public void scoreSay() {//ekrandaki guncel taslari ikonlara gore sayar
        lbl_black_score.setText("0");
        lbl_white_score.setText("0");
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (btnArray[i][j].getIcon() == newSiyahBtn) {
                    int blackScore = Integer.parseInt(lbl_black_score.getText());
                    blackScore++;
                    lbl_black_score.setText(blackScore + "");
                } else if (btnArray[i][j].getIcon() == newBeyazBtn) {
                    int whiteScore = Integer.parseInt(lbl_white_score.getText());
                    whiteScore++;
                    lbl_white_score.setText(whiteScore + "");
                }
            }
        }
    }

    private void hareketEt(int row, int column) {//uygun yere tiklanildiginda arada kalan taslarin ikonunu degistirir.
        grid_num[row][column] = oyuncu;
        ilkEkran();
        for (int rowYonu = -1; rowYonu <= 1; rowYonu++) {
            for (int colYonu = -1; colYonu <= 1; colYonu++) {
                if (rowYonu == 0 && colYonu == 0) {
                    continue;
                }

                int satÄ±r = row + rowYonu;
                int sutun = column + colYonu;
                boolean karsitCiktiMi = false;

                while (satÄ±r >= 0 && satÄ±r < size && sutun >= 0 && sutun < size) {
                    if (grid_num[satÄ±r][sutun] == 0) {
                        break;
                    } else if (grid_num[satÄ±r][sutun] == oyuncu) {
                        if (karsitCiktiMi) {
                            int turnRow = row + rowYonu;
                            int turnColumn = column + colYonu;
                            while (turnRow != satÄ±r || turnColumn != sutun) {
                                if (oyuncu == 1) {
                                    //btnArray[flipRow][flipCol].setBackground(Color.BLACK);
                                    btnArray[turnRow][turnColumn].setIcon(newSiyahBtn);
                                } else {
                                    //btnArray[flipRow][flipCol].setBackground(Color.WHITE);
                                    btnArray[turnRow][turnColumn].setIcon(newBeyazBtn);
                                }
                                grid_num[turnRow][turnColumn] = oyuncu;
                                turnRow += rowYonu;
                                turnColumn += colYonu;
                            }
                            break;
                        } else {
                            break;
                        }
                    } else {
                        karsitCiktiMi = true;
                        satÄ±r += rowYonu;
                        sutun += colYonu;
                    }
                }
            }
        }
        oyuncu = 3 - oyuncu;
    }

    public boolean hamleVarMi(int row, int col) {//tiklanilan yerin uygun olup olmadigi kontrol edilir
        if (grid_num[row][col] != 0) {
            return false;
        }
        // Gidilecek yonleri kontrol et
        for (int rowYonu = -1; rowYonu <= 1; rowYonu++) {
            for (int colYonu = -1; colYonu <= 1; colYonu++) {
                if (rowYonu == 0 && colYonu == 0) {
                    continue;
                }

                int satÄ±r = row + rowYonu;
                int sutun = col + colYonu;
                boolean rakipBulduMu = false;

                while (satÄ±r >= 0 && satÄ±r < size && sutun >= 0 && sutun < size) {
                    if (grid_num[satÄ±r][sutun] == 0) {
                        break;
                    } else if (grid_num[satÄ±r][sutun] == oyuncu) {
                        if (rakipBulduMu) {
                            return true;
                        } else {
                            break;
                        }
                    } else {
                        rakipBulduMu = true;
                        satÄ±r = satÄ±r + rowYonu;
                        sutun = sutun + colYonu;
                    }
                }
            }
        }
        return false;
    }

    public void Kontrol() {//uygun yerlerin cercevelerini(border larini) kirmizi renkte gosterir
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (hamleVarMi(i, j)) {
                    btnArray[i][j].setVisible(true);
                    btnArray[i][j].setBorder(createRedLineBorder());
                } else if (btnArray[i][j].getIcon() != null) {
                    for (ActionListener listener : btnArray[i][j].getActionListeners()) {
                        btnArray[i][j].removeActionListener(listener);
                    }
                    btnArray[i][j].setFocusable(false);
                }
            }
        }
    }

    public void kimKazandi() {//oyun bittiginde kazanani ekranda gosterir
        int beyazSkor = Integer.parseInt(lbl_white_score.getText());
        int siyahSkor = Integer.parseInt(lbl_black_score.getText());
        AliEnesGurelSkorTablosu score = new AliEnesGurelSkorTablosu();
        if (oyunBittiMi()) {
            tabloyaYazdir();
            if (Integer.parseInt(lbl_black_score.getText()) > Integer.parseInt(lbl_white_score.getText())) {
                JOptionPane.showMessageDialog(rootPane, login.getKullanici1().kullanici_Adi + " KAZANDI\nOyuncu Skoru:" + siyahSkor, "OYUN BITTI", HEIGHT, newSiyahBtn);
                score.kullanici = login.getKullanici1();
                score.skoru = siyahSkor + "";
                skor(score);
            } else if (Integer.parseInt(lbl_black_score.getText()) < Integer.parseInt(lbl_white_score.getText())) {
                JOptionPane.showMessageDialog(rootPane, login.getKullanici2().kullanici_Adi + " KAZANDI\nOyuncu Skoru:" + beyazSkor, "OYUN BITTI", HEIGHT, newBeyazBtn);
                score.kullanici = login.getKullanici2();
                score.skoru = beyazSkor + "";
                skor(score);
            } else {
                JOptionPane.showMessageDialog(rootPane, "OYUN BERABERE\n" + login.getKullanici2().kullanici_Adi + " Skoru:" + beyazSkor + "\n" + login.getKullanici1().kullanici_Adi + " Skoru:" + siyahSkor, "OYUN BITTI", HEIGHT, iconBerabere);
                score.kullanici = login.getBerabere();
                score.skoru = login.getKullanici1().kullanici_Adi + ":" + siyahSkor + " - " + login.getKullanici2().kullanici_Adi + ":" + beyazSkor;
                skor(score);
            }
        }
    }

    public void skor(AliEnesGurelSkorTablosu skor) {//skoru kaydetme
        try {
            AliEnesGurelData.AddSkor(skor);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
        try {
            AliEnesGurelData.DosyayaSkorYazdirma();
            JOptionPane.showMessageDialog(null, "Skor basariyla kayit edilmistir");
        } catch (IOException ex) {
            Logger.getLogger(AliEnesGurelRegister.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public boolean oyunBittiMi() {//oyunun bitip bitmedigini kontrol eder
        // Check if the grid is full
        boolean gridIsFull = true;
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (grid_num[i][j] == 0) {
                    gridIsFull = false;
                    break;
                }
            }
            if (!gridIsFull) {
                break;
            }
        }
        if (gridIsFull) {
            return true;
        }

        boolean player1HasValidMove = false;
        boolean player2HasValidMove = false;
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (grid_num[i][j] == 0) {
                    if (hamleVarMi(i, j)) {
                        if (oyuncu == 1) {
                            player1HasValidMove = true;
                        } else {
                            player2HasValidMove = true;
                        }
                    }
                }
            }
        }
        if (!player1HasValidMove && !player2HasValidMove) {
            return true;
        }
        return false;
    }

    public Border createRedLineBorder() {//kirmizi border olusturmak icin
        if (redLine == null) {
            redLine = new LineBorder(Color.RED, 5);
        }
        return redLine;
    }

    public void guncelle() {//her hamlede ekrani gunceller ve yeni hamlelerin borderini kirmizi yapar.
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (hamleVarMi(i, j)) {
                    btnArray[i][j].setVisible(false);
                    Border emptyBorder = BorderFactory.createEmptyBorder();
                    btnArray[i][j].setBorder(emptyBorder);
                    pnl_grid[i][j].setBackground(Color.GREEN);
                }
            }
        }
    }

    public void tabloyaYazdir() {//skor tablosuna oyun bittiginde son skoru yazar
        int beyazSkoru = Integer.parseInt(lbl_white_score.getText());
        int siyahSkoru = Integer.parseInt(lbl_black_score.getText());
        String whoWon = "";
        if (oyunBittiMi()) {
            if (siyahSkoru > beyazSkoru) {
                whoWon = login.getKullanici1().kullanici_Adi;
                Object[] skorTablosunaEkle = {whoWon, lbl_black_score.getText(), login.getKullanici2().kullanici_Adi + ":" + lbl_white_score.getText(), hamle};
                scoreTable.addRow(skorTablosunaEkle);
            } else if (siyahSkoru < beyazSkoru) {
                whoWon = login.getKullanici2().kullanici_Adi;
                Object[] skorTablosunaEkle = {whoWon, lbl_white_score.getText(), login.getKullanici1().kullanici_Adi + ":" + lbl_black_score.getText(), hamle};
                scoreTable.addRow(skorTablosunaEkle);
            } else {
                whoWon = "OYUN BERABERE";
                Object[] skorTablosunaEkle = {whoWon, lbl_black_score.getText() + " = " + lbl_white_score.getText(), whoWon, hamle};
                scoreTable.addRow(skorTablosunaEkle);
            }
        }
    }


    private void spnrAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_spnrAncestorAdded

    }//GEN-LAST:event_spnrAncestorAdded

    private void spnrStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnrStateChanged
        lbl_spnr.setText(spnr.getValue() + "");//spinner ile ayni anda label i gunceller.
    }//GEN-LAST:event_spnrStateChanged

    private void menuItem_CikisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_CikisActionPerformed
       int secenek = JOptionPane.showConfirmDialog(rootPane, "Cikis Yapmak Istediginizden Emin Misiniz?", "CIKIS YAP", JOptionPane.YES_NO_OPTION, HEIGHT, newCikis);
        if (secenek == ConfirmationCallback.YES) {
            System.exit(0);
        }//menudeki cikis ile oyunu sonlandirir
    }//GEN-LAST:event_menuItem_CikisActionPerformed

    private void btn_cikisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cikisActionPerformed
        int secenek = JOptionPane.showConfirmDialog(rootPane, "Cikis Yapmak Istediginizden Emin Misiniz?", "CIKIS YAP", JOptionPane.YES_NO_OPTION, HEIGHT, newCikis);
        if (secenek == ConfirmationCallback.YES) {
            System.exit(0);
        }
        //cikis butonu ile oyunu sonlandirir
    }//GEN-LAST:event_btn_cikisActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AliEnesGurelFrm_GameScene.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AliEnesGurelFrm_GameScene.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AliEnesGurelFrm_GameScene.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AliEnesGurelFrm_GameScene.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new AliEnesGurelFrm_GameScene().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cikis;
    private javax.swing.JButton btn_yeniOyun;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_black_score;
    private javax.swing.JLabel lbl_oyuncu1;
    private javax.swing.JLabel lbl_oyuncu2;
    private javax.swing.JLabel lbl_spnr;
    private javax.swing.JLabel lbl_white_score;
    private javax.swing.JMenuItem menuItem_Cikis;
    private javax.swing.JMenuItem menuItem_YeniOyun;
    private javax.swing.JMenu menu_oyun;
    private javax.swing.JMenu menu_skorlar;
    private javax.swing.JPanel pbl_sagBilgi;
    private javax.swing.JPanel pnl_altBilgi;
    private javax.swing.JPanel pnl_gameScene;
    private javax.swing.JPanel pnl_sira;
    private javax.swing.JSpinner spnr;
    private javax.swing.JTable tbl_tablo;
    // End of variables declaration//GEN-END:variables
}
